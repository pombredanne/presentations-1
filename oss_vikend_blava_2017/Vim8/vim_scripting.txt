Tvorba pluginů pro textový editor Vim
=====================================
■ Author   Pavel Tišnovský
■ Email    <ptisnovs 0x40 redhat 0x2e com>
■ Datum    2017-06-15

Stručná historie verzí Vimu
-------------------------------
1991   Vim 1.14   první oficiálně vydaná verze
1992   Vim 1.22   port na Unix 
1993   Vim 2.0    Vim Improved
1994   Vim 3      horizontálně rozdělená okna, integrovaná nápověda
1996   Vim 4      GUI
1998   Vim 5      zvýraznění syntaxe, vertikálně rozdělená okna
...               Unicode, diff mode, port na VMS, BeOS, Mac,
...               vylepšení regexpů o \{} 
2001   Vim 6      Easy Vim (používá to někdo? :-)
2006   Vim 7      podpora pro další skriptovací jazyky, taby
...               slovníky, omnicompletion
2016   Vim 8      viz zbytek přednášky

Jak poznat, že používám Vim 8?
------------------------------
:smile

V čem psát pluginy pro Vim?
---------------------------
▶ Jazyk vimscript
    zabudovaný přímo do Vimu
▶ Rozhraní mezi Vimem a dalšími skriptovacími enginy

Jazyk vimscript
---------------
▶ Umožňuje kombinovat příkazy Vimu s dalšími konstrukcemi
    podmínky
    smyčky
▶ Umožňuje přistupovat k interním strukturám Vimu
▶ Imperativní jazyk
    Původně
        velmi jednoduché zpracování seznamu příkazů
    Současnost
        Vim8
        podporuje některé vlastnosti převzaté z FP světa

Když vimscript nevyhovuje
-------------------------
▶ Rozhraní mezi Vimem a dalšími skriptovacími enginy
    Python
    TCL
    Perl
    Ruby
    MzScheme
    Lua
    ...
:help if_pyth
:help if_tcl
:help if_perl
:help if_ruby
:help if_mzsch

Když vimscript nevyhovuje
-------------------------
▶ Rozhraní musí být povoleno při překladu Vimu!
:ver
.
▶ Lze testovat:
:echo has("python")
:echo has("perl")
atd.

Spouštění vimscriptu
--------------------
▶ Příkazy je možné spouštět přímo v příkazovém režimu
    :echo "Hello world!"
▶ Delší skripty je vhodnější ukládat do samostatných souborů
    Koncovka:
        .vim (pro zvýraznění syntaxe)
    Spuštění:
        :source %
        :so %
    Vim -S jméno_skriptu

Základní vlastnosti vimscriptu
------------------------------
▶ Proměnné v různých "jmenných prostorech"
▶ Přístup k proměnným a konstantám samotného Vimu
▶ Pseudoproměnné
▶ Práce s řetězci
    přidány speciální operátory
▶ Regulární výrazy
    přidány speciální operátory
▶ Rozhodovací konstrukce
▶ Programové smyčky
▶ Funkce
▶ Složené datové typy

Datové typy
-----------
▶ Primitivní
    celá čísla 32/64bit
    čísla s plovoucí řádovou čárkou
    (boolean jako 0 a 1)
    řetězce
▶ Složené datové typy
    seznam
    slovník (asociativní pole)
    reference na funkci (funcref)

Proměnné, příkaz :let, příkaz :echo
-----------------------------------
"
:let a=6
:let b=7
:let c=a*b
:echo c

Základní vlastnosti vimscriptu
------------------------------
" Ve skutečnosti není nutné používat dvojtečku
" ta se uplatní jen v interaktivním režimu
"
" Spuštění: vim -S script2.vim
"
let a=6
let b=7
let c=a*b
echo c

Spojování řetězců
-----------------
let x="Hello"
let y="world"
echo x . " " . y . "!"

Programová smyčka while
-----------------------
let mylist = ["Answer", "to", "The", "Ultimate", "Question",
              "of", "Life,", "the", "Universe,", "and", "Everything:",
              42]
echo len(mylist)
"
let i = 0
while i < 12
    echo mylist[i]
    let i+=1
endwhile

Programová smyčka for-each
--------------------------
let mylist = ["Answer", "to", "The", "Ultimate", "Question",
              "of", "Life,", "the", "Universe,", "and", "Everything:",
              42]
"
for item in mylist
    echo item
endfor

Prefixy u proměnných
--------------------
1    g:variable_name    globální
2    s:variable_name    lokální v souboru se skriptem
3    w:variable_name    lokální v daném okně (ne bufferu)
4    t:variable_name    lokální v tabu
5    b:variable_name    lokální pro buffer (ne okno)
6    l:variable_name    skutečné lokální proměnné ve funkcích
7    a:variable_name    argumenty funkcí
8    v:variable_name    konstanty a proměnné Vimu

Použití prefixů u proměnných
----------------------------
" 
echo v:version
" 
" g: t: jsou ve skutečnosti slovníky
echo "All g: variables:"
echo g:
echo "All t: variables:"
echo t:
echo "All w: variables:"
echo w:
echo "All b: variables:"
echo b:

Výpis všech konstant a proměnných Vimu
--------------------------------------
echo v:
" 
let vars = v:
for item in keys(vars)
    echo item
    echo vars[item]
    echo "----------------"
endfor

Pseudoproměnné
--------------
" &name   - konfigurační parametry
" &l:name - lokální konfigurační parametry
" &g:name - globální konfigurační parametry
" @name   - registry
" $name   - proměnné prostředí (env vars)

Pseudoproměnné - proměnné prostředí
-----------------------------------
echo $HOME
echo $USER
echo $DISPLAY
 
Pseudoproměnné - konfigurační parametry
---------------------------------------
echo &backupdir
echo &encoding
echo &fileencoding
echo &fileformat
"
nmap ]] :let &tabstop += 1<CR>
nmap [[ :let &tabstop -= &tabstop > 1 ? 1 : 0<CR>

Pseudoproměnné - registry
-------------------------
let @"=$PATH
reg "

Práce s registry Vimu
---------------------
let @"="foo bar"
let @*="xyzzy"
let @+=42
" 
reg
" 
" nyní vyzkoušejte 'Paste' v jiné aplikaci (Firefox, Gedit, atd.)

Operace s numerickými hodnotami
-------------------------------
let number1 = 6
let number2 = 7
" 
echo "Arithmetic:"
echo number1 + number2
echo number1 - number2
echo number1 * number2
echo number1 / number2
echo number1 % number2
echo +number1
echo -number1
" 
echo "Comparison:"
echo number1 == number2
echo number1 != number2
echo number1 > number2
echo number1 >= number2
echo number1 < number2
echo number1 <= number2

Pravdivostní hodnoty
--------------------
let bool1 = 1
let bool2 = 0
" 
echo "Not, and, or:"
echo !bool1
echo !bool2
echo bool1 && bool2
echo bool1 || bool2
" 
echo "Ternary operator:"
echo bool1 ? "true" : "false"
echo bool2 ? "true" : "false"

Konverze řetězec->číslo->pravdivostní hodnota
---------------------------------------------
echo "String->number->boolean conversion"
echo !0
echo !"0"
echo !1
echo !"1"

Výrazy a řetězce
----------------
let str1 = "hello"
let str2 = "HELLO"
" 
echo "String concatenation:"
echo str . str

Ignorecase/noignorecase
-----------------------
echo "Ignore vs. noignorecase"
set ignorecase
" Use :set ignorecase settings
echo str1 == str2
" Don't ignore case
echo str1 ==# str2
" Let's ignore case
echo str1 ==? str2

Ignorecase/noignorecase
-----------------------
echo "Ignore vs. noignorecase"
set noignorecase
" Use :set ignorecase settings
echo str1 == str2
" Don't ignore case
echo str1 ==# str2
" Let's ignore case
echo str1 ==? str2

Lexikografické porovnání řetězců
--------------------------------
" lexikografické - testuje slovníkové řazení dvou řetězců
echo "String comparion"
echo "ax" <  "bx"
echo "ax" <= "bx"
echo "ax" >= "bx"
" 
" opět je možné nastavit chování ignorecase/noignorecase
echo "String comparion and ignore/noignorecase"
echo "Bart" <   "bart"
echo "Bart" <#  "bart"
echo "Bart" <?  "bart"

Regulární výrazy
----------------
" Test zda řetězec vyhovuje či naopak nevyhovuje regulárnímu výrazu
" Operátory =~ a !~
"
let str1 = "hello"
let str2 = "HELLO"
let regexp = "[a-z]*"
" 
echo "String and regexp:"
echo str1 =~ regexp
echo str2 !~ regexp
" 
echo "Ignorecase vs noignorecase:"
set ignorecase
" Use Vim settings
echo str2 =~ "Hello"
" Don't ignore case
echo str2 =~# "Hello"
" Let's ignore case
echo str2 =~? "Hello"
" 
set noignorecase
" Use Vim settings
echo str2 =~ "Hello"
" Don't ignore case
echo str2 =~# "Hello"
" Let's ignore case
echo str2 =~? "Hello"

Seznamy
-------
let list1=[1, 2, 3, 4]
echo list1
" 
let two=2
let list2=[1, two, "3", "čtyři"]
echo list2
" 
let list3=[[11, 12, 13] , [21, 22, 23], [31, 32, 33]]
echo list3
" 
let first=list1[0]
echo first
" 
let list2[1]="xyzzy"
echo list2
" 
let list3=[[11, 12, 13] , [21, 22, 23], [31, 32, 33]]
echo list3[2][2]
" 
echo "Indexes are ok:"
echo get(list1, 1)
echo get(list1, 2)
" 
echo "Indexes are out of bounds:"
echo get(list1,-1)
echo get(list1, 4)

Spojování seznamů
-----------------
echo [1,2]+[3,4]
" 
let list1=[1, 2, 3]
let list2=["3", "4", "5"]
let list3=[[11, 12, 13] , [21, 22, 23], [31, 32, 33]]
" 
let concat=list1+list2+list3
echo concat

Slovníky
--------
let dictionary1={"one":1, "two":2, "three":3, "four":4}
echo dictionary1
" 
let dictionary2={"one":1, "two":2, "three":3}
echo dictionary2["one"]
echo dictionary2.one
" 
let xx=v:
echo xx["version"]
" 
echo xx.version
" 
echo xx["progname"]
echo xx.progname

Řetězce - přístup ke znakům či podřetězcům
------------------------------------------
let str = "http://www.root.cz"
while str != ""
    echo str
    let str = str[1 : strlen(str) - 1]
endwhile

Postupné zpracování řetězce
---------------------------
let str = "http://www.root.cz"
while str != ""
    echo str
    if str =~ "^root.*"
        break
    endif
    let str = str[1 : strlen(str) - 1]
endwhile

Použití registru používaného implicitně operací yank
----------------------------------------------------
let matrix = [ [1,2,3], [4,5,6], [7,8,9] ]
let yank_reg = ""
for row in matrix
    for item in row
        let yank_reg = yank_reg . "\t" . (item*2)
    endfor
    let yank_reg = yank_reg . "\n"
endfor
let @" = yank_reg
normal p

Skriptovací engine ve Vimu 8
----------------------------
▶ ID oken
▶ Anonymní funkce (lambdy)
▶ Časovače
▶ Podpora formátu JSON
▶ Kanály
▶ Úlohy

ID oken
-------
" Funkce bude obecně vracet různá čísla:
function! PrintWindowNumbers()
    let windowNumbers = []
    windo call add(windowNumbers, winnr()) 
    for windowNumber in windowNumbers
        echo windowNumber
    endfor
endfunction
"
" Funkce bude pro jedno okno vždy vracet stejné ID
function! PrintWindowIDs()
    let windowIDs = []
    windo call add(windowIDs, win_getid(winnr())) 
    for windowID in windowIDs
        echo windowID
    endfor
endfunction

Anonymní funkce (lambdy)
------------------------
Zápis:
    {x,y -> x + y}
Otestování:
    :echo {x,y -> x + y}(1,2)
Přiřazení do proměnné (pojmenování):
    :let Fce={x,y -> x + y}
    :echo Fce(1,2)
    3

Funkce vyššího řádu
-------------------
let  sequence = range(10)
echo sequence
"
call map(sequence, {index, value -> value * 2})
echo sequence
"
call map(sequence, {index, value -> value * 2})
echo sequence
"
let  sequence2 = filter(copy(sequence), {index, value -> value % 2 == 0})
let  sequence3 = filter(copy(sequence), {index, value -> value % 3 == 0})
echo "sequence1=" sequence
echo "sequence2=" sequence2
echo "sequence3=" sequence3

Časovače
--------
Vytvoření časovače:
    timer_start(interval, funcref či anonymní funkce)
    timer_start(interval, funcref či anonymní funkce, {'repeat':počet_opakování})
Periodické opakování:
    timer_start(interval, funcref či anonymní funkce, {'repeat':-1})

Podpora formátu JSON
--------------------
json_encode(výraz)
    převod výrazu do JSON formátu, který se vrátí ve formě řetězce
json_decode(řetězec)
    opak předchozí funkce, parsování řetězce s daty uloženými v JSON
    formátu do interních datových struktur VimScriptu
js_encode(výraz)
    podobné funkci json_encode(), ovšem klíče nejsou umístěny
    v uvozovkách
js_decode(řetězec)
    podobné funkci json_decode(), ovšem při parsingu se nevyžaduje,
    aby byly klíče umístěny v uvozovkách

Režimy pluginů
--------------
Režim        Připojení    Popis
démon        socket       proces pro více instancí Vimu
úloha (job)  socket/pipe  proces pro jednu instanci Vimu
krátká úloha socket/pipe  neběží po celou dobu existence Vimu
filtr        pipe         spouští se synchronně

Úlohy
-----
▶ Při spuštění pluginu v samosatatném procesu
job_start()   - cesta ke spriptu + options
job_status()  - "run", "fail", "dead" ...
job_stop()    - "term", "hup", "quit", ...
job_channel() - získání kanálu pro komunikaci

Kanály
------
▶ Slouží pro komunikaci mezi Vimem a externími pluginy
▶ Využívají se sockety nebo pipe
Typ zprávy Význam
RAW        obecný formát
NL         textová zpráva je ukončena znakem (NL)
JSON       formát JSON
JS         formát JSON s klíči odpovídajícími JavaScriptu

Standardní formát pluginů
-------------------------------
▶ Stávající řešení
    Vundle
    Pathogen
▶ Standardní správce balíčků
    Struktura adresářů s balíčky
    ~/.vim/pack

Struktura adresářů s balíčky
-------------------------------
.
└── pack
    └── balicky
        ├── start
        │   ├── plugin1
        │   │   ├── doc
        │   │   │   └── plugin1.txt
        │   │   ├── LICENSE
        │   │   ├── plugin
        │   │   │   └── plugin1.vim
        │   │   └── README.md
        │   └── plugin2
        │       ├── doc
        │       │   └── plugin2.txt
        │       ├── LICENSE
        │       ├── plugin
        │       │   └── plugin2.vim
        │       └── README.md
        └── opt
            ├── makejob
            │   ├── doc
            │   │   └── makejob.txt
            │   ├── LICENSE
            │   ├── plugin
            │   │   └── makejob.vim
            │   └── README.md
            └── pluginZ
                ├── doc
                │   └── pluginZ.txt
                ├── LICENSE
                ├── plugin
                │   └── pluginZ.vim
                └── README.md


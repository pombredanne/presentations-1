Vývoj otevřeného softwaru
=========================
■ Autor    Pavel Tišnovský, Red Hat
■ Email    <ptisnovs@redhat.com>
■ Datum    2018-03-08

Obsah přednášky
-------------------------------
▶ Otevřený software
▶ Uzavřený ⇒ otevřený software
▶ Specifika vývoje v komunitě
▶ Komunikace
▶ Sledování chyb
▶ Softskills
▶ Workflow

Otevřený software
-------------------------------
▶ původní význam
    veřejně dostupné zdrojové kódy
    licence umožňující jejich použití a modifikaci
    reakce na limity klasického uzavřeného software
        vendor lock
        neopravované chyby (ve starších verzích)
        chybějící vlastnosti
        zákony zakazující reverse engineering
        „zadní vrátka“

Otevřený software
-------------------------------
▶ Spolupráce velkého množství vývojářů,
  dokumentaristů, testerů atd.:
▶ Jak malé utility tak i velké aplikace
▶ Firefox (dnešní statistika)
     36 802 100 řádků kódu
     986 310 commitů (změn)
       6 313 přispěvatelů
      12 129 člověkoroků (COCOMO model)
▶ Jádro Linuxu (dnešní statistika)
     16 859 900 řádků kódu
     711 819 commitů (změn)
      17 417 přispěvatelů
       5 482 člověkoroků (COCOMO model)

Otevřený software
-------------------------------
▶ Nejenom vlastní zdrojové kódy
    ■ Wikipedia
    ■ Wikimedia
    ■ Open data
    ■ Open hardware
    ■ Dokumentace
    ■ Obrázky
    ■ Multimediální soubory
    ■ ...

Uzavřený ⇒ otevřený software
-------------------------------
▶ Různé důvody pro „otevření“ software
    Sun JDK => OpenJDK
    Eclipse
        IBM 2001, celková investice cca 40 M$
        2004 Eclipse Foundation
    OpenStack
        původně Rackspace Hosting a NASA

Specifika vývoje v komunitě
-------------------------------
▶ Lidé s různými cíli a zájmy
    vs komerční vývoj s jasnými cíli
▶ Hierarchie popř. plochá struktura
    „katedrála/tržiště“
▶ Rozhodování o dalším směřování vývoje
    někdy řešeno formou forků
    OpenOffice ⇒ LibreOffice
    GNU Emacs ⇒ XEmacs
    MySQL ⇒ MariaDB

Zdrojové kódy
-------------------------------
Úprava zdrojových kódů velkým počtem vývojářů současně
Možnost vracet se ke starším verzím
Sledování, kdo změnu udělal
Paralelní vývoj více verzí (větve, branches)
Distribuované systémy pro správu verzí
    Git
    Mercurial
    BitKeeper
    GNU Bazaar
    ...

Komunikace
-------------------------------
    e-mail
    IRC
    Slack
    Mattermost
    ...

Sledování chyb
-------------------------------
    Bugzilla
    JIRA
    GitHub
    GitLab (většinou interní projekty)

Testování
-------------------------------
    CI (Continuous Integration)
    Jednotkové testy
    Integrační testy
    Performance testy
    BDD
    ...

Statistické informace
-------------------------------
    OpenHub

Softskills
-------------------------------
Nutnost nepřímé komunikace s lidmi z různých kulturních oblastí
Časové zóny
Jazyková vybavenost
    někteří používají Google Translator
„Vlci samotáři“
Formální i neformální leadeři
Guido van Rossum
    „Benevolent Dictator For Life“

Workflow
-------------------------------
Dnes již většinou založen na možnostech Gitu
    Fork + pull (merge) request
    Review process
    CI (Continuous Integration)
Starší způsob
    CVS, Subversion, ...

GitHub
-------------------------------
1. fork
2. vytvoření nové větve
3. vytvoření pull requestu
4. schválení/iterace
5. sloučení změn do hlavní větve

Programovací jazyk Go - workshop
Linux Days 2019
Tags: golang, go

Pavel Tišnovský <ptisnovs@redhat.com>
Red Hat, Inc.



* Úvodní informace o workshopu

* Gophers
#The Go gopher was designed by Renee French. (http://reneefrench.blogspot.com/)
#Source https://golang.org/doc/gopher/fiveyears.jpg
#The design and this image is licensed under the Creative Commons 3.0 Attributions license.
.image ./images/fiveyears.jpg _ 900



Cíle jazyka Go
- Jednoduchost, jednoznačnost
- Jazyk postaven na jednoduchých a známých konceptech
- Lze začít programovat po doslova několikaminutovém tutoriálu
- Bezpečné aplikace
- Mikroslužby
- Skripty a nástroje pro DevOps od DevOps
- Jazyk pro potřeby Googlu: spíše pro mladší vývojáře (C/C++, Java, Python ve škole)
- Použití pro rozsáhlejší aplikace psané velkým týmem
- Paralelní běh částí aplikace
- Rozumný výpočetní výkon: cílem je dosáhnout C/C++/Fortranu



Charakteristické rysy jazyka Go
- Poučení z chyb, které najdeme například v C/C++
- Silný typový systém
- Nepoužívají se makra založená na textové substituci
- Nepoužívají se hlavičkové soubory
- Bezpečná práce s pamětí (+ GC)
- Standardizovaný framework pro testování
- Rychlé překlady
- Syntaktické věci: ++/-- jen postfixové a nejsou to výrazy
- Nepoužívá se ukazatelová aritmetika
- Nepoužívají se šablony
- Nejsou podporovány výjimky (prozatím)



* Důležité vlastnosti Go

- Správa paměti se přenáší do runtime
- Gorutiny a kanály (600k gorutin, 90% CPU)
- Více imperativních rysů: explicitní zápis většiny operací
- Více pragmaticky zaměřený jazyk
- Prozatím nedosahuje tak vysokého výpočetního výkonu jako C
- "Don't communicate by sharing memory; share memory by communicating"



* Go fundamentals
.play sources/01_hello.go

* Klasický program typu "Hello world"
.play sources/hello.go
.code sources/run_hello.go
.code sources/build_hello.go



* Balíčky
- každý zdrovový kód začíná deklarací `package`
- speciální balíček `main`
- main: main() pro spustitelné aplikace
- workspace je definováno v proměnné `$GOPATH`
- základní struktura: `src`, `bin`



* Funkce
.play sources/01_func.go



* Více návratových hodnot
.play sources/02_func.go



* Pojmenované návratové hodnoty
.play sources/03_func.go



* Konstanty
.play sources/04_consts.go



* Proměnné
.play sources/05_vars.go



* Typová konverze
- nikdy neprobíhá automaticky
.play sources/06_casts.go

* Podmínky
- Lze deklarovat proměnné platné pouze v rámci větve s podmínkou
.play sources/07_if.go

* Větev `else`
- Lokální proměnné jsou platné i ve větvi `else`
.play sources/08_if_else.go

* Programové smyčky
- opět lze použít proměnné lokální v rámci bloku se smyčkou
- reprezentovány jediným klíčovým slovem `for`
.play sources/09_for.go

* Rozvětvení
- opět lze použít proměnné lokální v rámci bloku s rozvětvením
- testováno shora dolů, první úspěšný test vede ke spuštění větve
- nepoužívá se `break`
- naopak lze použít `fallthrough` s opačným významem
.play sources/10_switch.go

* Rozvětvení, druhá část
- neceločíselné hodnoty, nemusí se jednat o konstanty
.play sources/11_switch.go

############################################################

* Detekce a zpracování chyb
- `error` je typ
[[https://blog.golang.org/error-handling-and-go]]
.play sources/12_ret.go

* Ignorování návratových hodnot/hodnoty
- použití '_'
.play sources/13_ret.go

############################################################

* Příkaz `defer`
- klíčové slovo v Go
- "zapamatování" příkazů, které budou volány před skutečným opuštěním funkce
- založeno na zásobníku (LIFO, stack)
- parametry jsou vyhodnoceny ve chvíli a na místě, kdy je `defer` deklarováno v runtime
- přes `defer` lze změnit návratové hodnoty funkce

* Nejjednodušší použití příkazu `defer`
- funkce `on_finish()` je zavolána před opuštěním funkce `main()`
.play sources/14_defer_basic_usage.go

* Funkce deklarovaná přímo v `defer`
- anonymní funkce, lambda, uzávěr
.play sources/15_defer_func.go

* Funkce deklarovaná přímo v `defer` (pokračování)
- závorky okolo lambdy nejsou nutné
.play sources/16_defer_func.go

* Funkce deklarovaná přímo v `defer` (pokračování)
- specifikace argumentů předaných funkci
.play sources/17_defer_with_parameters.go

* Více příkazů `defer` v jediné funkci
- LIFO
.play sources/18_more_defers.go

* Výpočet argumentů pro volání funkce v `defer`
.play sources/19_defer_arguments_evaluation.go

* Výpočet argumentů pro volání funkce v `defer` (pole)
.play sources/20_defer_arguments_evaluation.go

* Defer a více příkazů `return`
.play sources/21_defer_on_all_returns.go /^package main/,/^func main/

* Defer a více příkazů `return` (pokračování)
.play sources/21_defer_on_all_returns.go /^func main/,/^}/

* Praktické použití `defer`
.play sources/22_defer_practical_usage.go /^package main/,/func copyFile/

* Praktické použití `defer`
.play sources/23_defer_practical_usage.go /^func copyFile/,/^}/

* Praktické použití `defer`
.play sources/24_defer_practical_usage.go /^func main/,/^}/



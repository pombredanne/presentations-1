             Trasování v Linuxu
==================================================
■ Autor    Pavel Tišnovský, Red Hat
■ Email    <ptisnovs 0x40 redhat 0x2e com>
■ Datum    2019-10-06

Obsah přednášky (1)
--------------------------------------------------
▶ Trasování a ladění nativních aplikací v Linuxu
▶ Utilita ltrace
▶ Ukázka použití utility ltrace
▶ Zjištění doby trvání volané funkce a filtrace výstupu
▶ Zjištění statistiky volaných funkcí
▶ Utilita strace
▶ Ukázka použití utility strace
▶ DTrace

Obsah přednášky (2)
--------------------------------------------------
▶ SystemTap
▶ Ukázky použití SystemTap
▶
▶ GNU Debugger
▶
▶
▶ Odkazy na další informační zdroje

Trasování a ladění nativních aplikací v Linuxu
--------------------------------------------------
+----------+
|          |
| aplikace |
|          |
+----------+
     |
     |
     v
+----------+
|          |
|  glibc   |
|          |
+----------+
     |
     |
     v
+----------+
|          |
|  jádro   |
|          |
+----------+

Trasování a ladění nativních aplikací v Linuxu
--------------------------------------------------
- volaní funkcí z knihoven: ltrace
- systémová volání: strace
- ladění a trasování aplikací i knihoven: GNU Debugger
- stav aplikací, knihoven i OS: SystemTap

Trasování a ladění nativních aplikací v Linuxu
--------------------------------------------------
+----------+
|          |..... gdb
| aplikace |
|          |..... SystemTap
+----------+
     |
     |...... ltrace
     v
+----------+
|          |..... gdb
|  glibc   |
|          |..... SystemTap
+----------+
     |
     |...... strace
     v
+----------+
|          |..... SystemTap
|  jádro   |
|          |..... KGDB
+----------+

Utilita ltrace
--------------------------------------------------
- trasování volání knihovních funkcí
- vyhledání problémových či pomalých částí kódu
- zjištění způsobů alokace a dealokace paměti
- či pouze jednoduché trasování aplikace

Zavolání ltrace
--------------------------------------------------
ltrace jméno_binární_aplikace parametry_aplikace
ltrace parametry_ltrace jméno_binární_aplikace parametry_aplikace

Testovaný zdrojový kód
--------------------------------------------------

Ukázka použití utility ltrace
--------------------------------------------------
ltrace ./hello
.
__libc_start_main(0x40053d, 1, 0x7fffd2e1f5f8, 0x400560 <unfinished ...>
puts("Hello world!"Hello world!
)                                                                    = 13
+++ exited (status 0) +++

Testovaný zdrojový kód
--------------------------------------------------

Ukázka použití utility ltrace
--------------------------------------------------
ltrace ./random_bitmap
.
__libc_start_main(0x400bf4, 1, 0x7fff18e8d758, 0x400c70 <unfinished ...>
puts("processing:")                                    = 12
malloc(16)                                             = 0xa11010
malloc(921600)                                         = 0x7f45fdb46010
memset(0x7f45fdb46010, '\0', 921600)                   = 0x7f45fdb46010
memset(0x7f45fdb46010, '\0', 921600)                   = 0x7f45fdb46010
open("/dev/urandom", 0, 037560470000)                  = 3
read(3, "\270\325\332\340r8\304\354\306A\001S", 1920)  = 1920
...
...
...
vynecháno přibližně 480 řádků
...
...
...

Poslední testovaný zdrojový kód
--------------------------------------------------

Zjištění doby trvání volané funkce a filtrace výstupu
--------------------------------------------------

Zjištění statistiky volaných funkcí
--------------------------------------------------

Utilita strace
--------------------------------------------------

Ukázka použití utility strace
--------------------------------------------------

Dtrace
--------------------------------------------------

SystemTap
--------------------------------------------------

Ukázky použití SystemTapu
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------

Odkazy na další informační zdroje
--------------------------------------------------
Tracing (software)
https://en.wikipedia.org/wiki/Tracing_%28software%29

ltrace(1) - Linux man page
http://linux.die.net/man/1/ltrace

ltrace (Wikipedia)
https://en.wikipedia.org/wiki/Ltrace

strace(1) - Linux man page
http://linux.die.net/man/1/strace

strace (stránka projektu na SourceForge)
https://sourceforge.net/projects/strace/

strace (Wikipedia)
https://en.wikipedia.org/wiki/Strace

SystemTap (stránka projektu)
https://sourceware.org/systemtap/

SystemTap (Wiki projektu)
https://sourceware.org/systemtap/wiki

SystemTap (Wikipedia)
https://en.wikipedia.org/wiki/SystemTap

Dynamic Tracing with DTrace &amp; SystemTap
http://myaut.github.io/dtrace-stap-book/

DTrace (Wikipedia)
https://en.wikipedia.org/wiki/DTrace

GDB - Dokumentace
http://sourceware.org/gdb/current/onlinedocs/gdb/

GDB - Supported Languages
http://sourceware.org/gdb/current/onlinedocs/gdb/Supported-Languages.html#Supported-Languages

GNU Debugger (Wikipedia)
https://en.wikipedia.org/wiki/GNU_Debugger

The LLDB Debugger
http://lldb.llvm.org/

Debugger (Wikipedia)
https://en.wikipedia.org/wiki/Debugger

13 Linux Debuggers for C++ Reviewed
http://www.drdobbs.com/testing/13-linux-debuggers-for-c-reviewed/240156817

Getting started with ltrace: how does it do that?
https://www.ellexus.com/getting-started-with-ltrace-how-does-it-do-that/

Reverse Engineering Tools in Linux – strings, nm, ltrace, strace, LD_PRELOAD
http://www.thegeekstuff.com/2012/03/reverse-engineering-tools/

7 Strace Examples to Debug the Execution of a Program in Linux
http://www.thegeekstuff.com/2011/11/strace-examples/

Oracle® Solaris 11.3 DTrace (Dynamic Tracing) Guide
http://docs.oracle.com/cd/E53394_01/html/E53395/gkwpo.html#scrolltoc

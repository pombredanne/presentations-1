                Go vs. Rust
porovnání dvou progresivních kompilovaných jazyků
==================================================
■ Autor    Pavel Tišnovský, Red Hat
■ Email    <ptisnovs 0x40 redhat 0x2e com>
■ Datum    2018-09-xx

Obsah přednášky (1)
--------------------------------------------------
▶ Charakteristické rysy Rustu
▶ Charakteristické rysy Go

Charakteristické rysy Rustu
--------------------------------------------------
▶ Multiparadigmatický jazyk
    Funcionální rysy
    Imperativní
    Má některé OO rysy (ne však systém tříd)
▶ Dostupný pro všechny „zajímavé“ systémy
    Linux, (Free)BSD, macOS, Microsoft Windows
▶ Používaný na velkém množství architektur procesorů
    i686, x86-64, ARMv6/v7 (32), AArch64, MIPS, PowerPC, S390
    Cortex-A8, Cortex-A9
    Částečně i:
    Bare Cortex-M0, M0+, M1, M4(F), M7(F)
        bare = bez OS, jen core library
    (připravuje se i MSP430 - 16bit MCU!)
    https://forge.rust-lang.org/platform-support.html
▶ Současná verze používá LLVM backend
    Možnosti pro další vylepšování překladu
    (dovoluje i WebAssembly přes Emscripten)
▶ Cíle
    Bezpečné aplikace
    Paralelní běh částí aplikace
    Výkon srovnatelný s C a C++ (i pro nové prvky jazyka)
    Překladač s rozumným chybovým hlášením
× Poučení z chyb, které najdeme například v C/C++
    (=, string, ptr, makrosystém, chybové stavy, výjimky)

Charakteristické rysy Rustu (2)
--------------------------------------------------
▶ Unicode řetězce (UTF-8)
▶ Odvození typů proměnných (type inference)
▶ Striktní typová kontrola
▶ OOP založené strukturách (struct) a traitech
    × třídy, objekty a rozhraní
▶ Životní cyklus hodnot (zejména ukazatelů)
    (borrow)
▶ Bezpečná práce s objekty uloženými na zásobníku i haldě
    NPE? co to znamená? :-)
▶ Sémantiky „copy“ a „move“
▶ Generické parametry funkcí, prvky struktur, ...
▶ Pattern matching
▶ Funkce jsou taktéž datovým typem
    ⇒ lambdy atd.

Správce balíčků (Cargo)
-----------------------
▶ Vytvoření kostry nového projektu
▶ Nový projekt obsahuje i adresáře a soubory umožňující podporu SCM
    - Git
    - Mercurial
▶ Automatická kontrola, které soubory je zapotřebí přeložit
▶ Automatické stažení všech knihoven a jejich závislostí
▶ Spuštění projektu s možností předání parametrů příkazového řádku.
▶ Spuštění jednotkových testů
▶ Spuštění benchmarků
▶ Vyhledání knihovny v centrálním registru zaregistrovaných knihoven
▶ Publikování vlastního balíčku v centrálním registru (crates.io)
▶ Instalace aplikace

Charakteristické rysy jazyka Go
--------------------------------------------------
▶ Multiparadigmatický jazyk
    Procedurální
    Objekově orientovaný
    Podpora konstrukcí pro paralelní programování
▶ Dostupný pro všechny „zajímavé“ systémy
    Linux, (Free)BSD, macOS, Microsoft Windows
▶ Současná verze používá vlastní backend
▶ Cíle
    Bezpečné aplikace
    Paralelní běh částí aplikace
    Rozumný výpočetní výkon (cílem je dosáhnout C/C++/Fortranu)
× Poučení z chyb, které najdeme například v C/C++
    Silný typový systém

Charakteristické rysy jazyka Go (1)
--------------------------------------------------

Vybrané společné rysy jazyků Go a Rust
--------------------------------------------------
▶ Podporovány společnostmi soutěžícími na poli browserů
▶ Výsledkem překladu jsou nativní knihovny nebo spustitelné aplikace
▶ Dobré (nekryptické) chybové zprávy překladačů
    × chyba v šabloně v C++
▶ Syntaxe částečně připomínající "lepší" C

Největší rozdíly mezi jazyky Go a Rust
--------------------------------------------------
▶ vizuální porovnání programů zapsaných v Go a Rustu:
    http://rosetta.alhur.es/compare/go/rust/#



                Go vs. Rust
porovnání dvou progresivních kompilovaných jazyků
==================================================
■ Autor    Pavel Tišnovský, Red Hat
■ Email    <ptisnovs 0x40 redhat 0x2e com>
■ Datum    2018-09-xx

Obsah přednášky (1)
--------------------------------------------------
▶ Proč vlastně porovnávat Rust a Go?
▶
▶ Charakteristické rysy Rustu
▶ Rust a C/C++
▶ Správce balíčků (Cargo)
▶ Charakteristické rysy Go
▶ Makra v Go?
▶ A samozřejmě oblíbené téma pro debaty...
▶ Vybrané společné rysy jazyků Go a Rust
▶ Porovnání Rustu a Go
▶ Proč Go?
▶ Proč Rust?
▶ Zajímavosti
▶ Odkazy

Proč vlastně porovnávat Rust a Go?
--------------------------------------------------
▶ Flamewars!
    ◆ Nejlepší forma prokrastinace je sledování fór na Rootu...

Proč vlastně porovnávat Rust a Go?
--------------------------------------------------
▶ Jedná se skutečně o konkurenty?
    ◆ Z pohledu mnoha vývojářů ano...
▶ Vznik zhruba ve stejný čas
    ◆ Go veřejně představeno 2009
    ◆ Rust 2010 (teoretické práce jsou starší)
▶ Společná snaha o vyřešení některých problémů céčka
    ◆ bezpečná práce s paměti
        - nutnost
        - nikdo dnes nemůže přijít s jazykem
          s manuální správou paměti
    ◆ vícevláknové aplikace
    ◆ řetězce
    ◆ výjimečné stavy a jejich detekce/řešení/řízení
    ◆ problémy s textovými makry
▶ Překlad do nativního kódu
▶ Jazyky s podporovaným ekosystémem
    ◆ Dnes prakticky nutnost
        - gems

Ale jedná se SKUTEČNĚ o konkurenty?
--------------------------------------------------

Charakteristické rysy Rustu
--------------------------------------------------
▶ Multiparadigmatický jazyk
    ◆ Funkcionální rysy
    ◆ Imperativní
    ◆ Má některé OO rysy (ne však systém tříd)
▶ Dostupný pro všechny „zajímavé“ systémy
    ◆ Linux, (Free)BSD, macOS, Microsoft Windows
▶ Používaný na velkém množství architektur procesorů
    ◆ i686, x86-64
    ◆ MIPS, PowerPC, S390
    ◆ ARMv6/v7 (32), AArch64
    ◆ Cortex-A8, Cortex-A9
    ◆ Částečně i:
        - Bare Cortex-M0, M0+, M1, M4(F), M7(F)
          bare = bez OS, jen core library
          (připravuje se i MSP430 - 16bit MCU!)
    ◆ https://forge.rust-lang.org/platform-support.html
▶ Současná verze používá LLVM backend
    ◆ Možnosti pro další vylepšování překladu
        - dovoluje i WebAssembly přes Emscripten
▶ Cíle
    ◆ Bezpečné aplikace
    ◆ Paralelní běh částí aplikace
    ◆ Výkon srovnatelný s C a C++ (i pro nové prvky jazyka)
    ◆ Překladač s rozumným chybovým hlášením
× Poučení z chyb, které najdeme například v C/C++
    ◆ operátor =
    ◆ řetězce
    ◆ ukazatele
    ◆ makrosystém
    ◆ chybové stavy, výjimky

Charakteristické rysy Rustu (2)
--------------------------------------------------
▶ Unicode řetězce (UTF-8)
▶ Odvození typů proměnných (type inference)
▶ Striktní typová kontrola
▶ OOP založené strukturách (struct) a traitech
    × třídy, objekty a rozhraní
▶ Životní cyklus hodnot (zejména ukazatelů)
    (borrow)
▶ Bezpečná práce s objekty uloženými na zásobníku i haldě
    NPE? co to znamená? :-)
▶ Sémantiky „copy“ a „move“
▶ Generické parametry funkcí, prvky struktur, ...
▶ Pattern matching
▶ Funkce jsou taktéž datovým typem
    ⇒ lambdy atd.

Charakteristické rysy Rustu (3)
--------------------------------------------------
▶ Jednoduché věci se píšou jednoduše a stručně
        fn main() {
            println!("Hello world!");
        }
.
× Vyžadováno příliš mnoho znalostí na začátku:
        public class Test {
            public static void main(String[] args) {
                System.out.println("Hello World");
            }
        }
.
▶ "Takto přesně to musíte napsat, jinak se program nepřeloží"

Rust a C/C++
--------------------------------------------------
▶ Syntaxe Rustu jen částečně odvozena od C/C++
▶ Využití existujícího „ekosystému“
    ▶ Použití již hotových C knihoven
        - Foreign Function Interface (FFI)
    ▶ C++ knihovny
        - stále ještě problematické
▶ C ⇒ Rust
    Project Corrode

Správce balíčků (Cargo)
--------------------------------------------------
▶ Vytvoření kostry nového projektu
▶ Nový projekt obsahuje i adresáře a soubory umožňující podporu SCM
    - Git
    - Mercurial
▶ Automatická kontrola, které soubory je zapotřebí přeložit
▶ Automatické stažení všech knihoven a jejich závislostí
▶ Spuštění projektu s možností předání parametrů příkazového řádku.
▶ Spuštění jednotkových testů
▶ Spuštění benchmarků
▶ Vyhledání knihovny v centrálním registru zaregistrovaných knihoven
▶ Publikování vlastního balíčku v centrálním registru (crates.io)
▶ Instalace aplikace

Charakteristické rysy jazyka Go
--------------------------------------------------
„Less is more“
▶ Multiparadigmatický jazyk
    Procedurální
    Objekově orientovaný
    Podpora konstrukcí pro paralelní programování
▶ Vznik
    Snaha o přidání konstrukcí pro paralelní programování do C++
    Serverové aplikace pro Google
▶ Dostupný pro všechny „zajímavé“ systémy
    Linux, (Free)BSD, macOS, Microsoft Windows
▶ Současná verze používá vlastní backend
▶ Cíle
    Jednoduchost, jednoznačnost
    Jazyk postaven na jednoduchých a známých konceptech
    Bezpečné aplikace
    Mikroslužby
    Pro DevOps
    Použití pro rozsáhlejší aplikace psané velkým týmem
    Paralelní běh částí aplikace
    Rozumný výpočetní výkon
        ⇒ cílem je dosáhnout C/C++/Fortranu

Charakteristické rysy jazyka Go (2)
--------------------------------------------------
× Poučení z chyb, které najdeme například v C/C++
    Silný typový systém
    Nepoužívají se makra založená na textové substituci
    Nepoužívají se hlavičkové soubory
    Bezpečná práce s pamětí (+ GC)
    Standardizovaný framework pro testování
    Rychlé překlady
    Syntaktické věci: ++/-- jen postfixové a nejsou to výrazy
    Nepoužívá se ukazatelová aritmetika
    Nepoužívají se šablony
    Nejsou podporovány výjimky (prozatím)

Charakteristické rysy jazyka Go (3)
--------------------------------------------------
▶ Gorutiny a kanály
    600k gorutin, 90% CPU
▶ Typový systém
    Snadné vytváření nových typů
    Generické datové typy
        chystají se
        po stabilizaci jazyka (což nastalo)

Makra v Go?
--------------------------------------------------
▶ Céčkový přístup:
    řeší preprocesor
        #ifdef _DEBUG
        puts("something");
        #else
        puts("something else");
        #endif
▶ Částečně nahraditelná:
    řeší překladač
        const debug = false
        if debug {
            fmt.Println("something")
        } else {
            fmt.Println("something else")
        }

A samozřejmě oblíbené téma pro debaty...
--------------------------------------------------
▶ Formát zápisu programů
Definován kanonický formát
gofmt

Vybrané společné rysy jazyků Go a Rust
--------------------------------------------------
▶ Podporovány společnostmi soutěžícími na poli browserů
▶ Výsledkem překladu jsou nativní knihovny nebo spustitelné aplikace
▶ Dobré (nekryptické) chybové zprávy překladačů
    × chyba v šabloně v C++
▶ Syntaxe částečně připomínající "lepší" C
    Go
        package main
        
        import "fmt"
        
        func main() {
            fmt.Println("hello world")
        }
    Rust
        fn main() {
            println!("Hello world!");
        }
▶ Typ "slice"

Porovnání Rustu a Go
--------------------------------------------------
▶ vizuální porovnání programů zapsaných v Go a Rustu:
    http://rosetta.alhur.es/compare/go/rust/#

Porovnání Rustu a Go - komunita, akceptace
--------------------------------------------------
Jazyk            Rust           Go
Adaptace         pomalejší      rychlejší
Tiobe index      #31 (0,396%)   #16 (1,081%)
Stackshare       313            2780
Stack overflow   10100          32700
GitHub           30900 *        47500 *
GitHub           5210 forků     6510 forků
SO survey        73%            63% (loved)
SO survey         6%            13% (wanted)

Porovnání Rustu a Go z hlediska vývojáře
--------------------------------------------------
Jazyk             Rust          Go
Přístup           moderní       konzervativní
Syntaxe           komplikovaná  jednoduchá, minimalistická
Učící křivka      menší sklon   větší sklon
Učící křivka      větší ampli.  menší amplituda
Rychlost překladu pomalejší     rychlejší
Backend           LLVM          vlastní
Rychlost kódu     rychlejší     pomalejší
Typový systém     rozsáhlý      bez generik
Neměnnost         explicitní    string, další přes rozhraní
Práce s pamětí    vlastnictví   GC
Detekce souběhu   ano           jen nepřímo
Závislosti        cargo         prozatím složité řešit

Poznámka k souběhu
--------------------------------------------------
▶ Za běžné situace nemůže v Rustu nastat
Je to zajištěno modelem vlastnictví dat (ownership)
- existuje jen jediný vlastník dat
- toho je možné změnit pomocí move
- vlastnictví si lze vypůjčit (borrow)
- ovšem v tomto případě nelze vlastnictví změnit
(forma transakce)
- vše je řešeno v čase překladu!

Proč Go?
--------------------------------------------------

Proč Rust?
--------------------------------------------------

Zkouška dospělosti
--------------------------------------------------
▶ Zcela IMHO: překlad pro DSP
  TI řada TMS32C.... TMS32F....
  Analog Devices SHARC DSP
   Super Harvard Architecture Single-Chip Compute

A co jazyk D?
--------------------------------------------------
▶ Nechme promluvit samotného autora jazyka D
problém D - pomalá adaptace, prakticky žádný sex appeal
Go - má strategii (networking)
     ⇒má branding
     stojí za ním silná a známá firma
Rust - vývojáři musí udělat mnoho práce kvůli memory managementu
     - skutečně tak řeší business problém?
     - postaven na skvělých teoretických základech

Zajímavosti
--------------------------------------------------
▶ Rob Pike očekával, že Go začnou ve větším množství používat programátoři C++
× Ve skutečnosti se ke Go přiklánějí vývojáři v Pythonu nebo Ruby

Odkazy
--------------------------------------------------
▶ Less is exponentially more
  https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html

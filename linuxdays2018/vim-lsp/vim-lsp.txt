          Language Server Protocol
                   aneb
Jak si vytvořit modulární IDE (nejenom) z Vimu
==================================================
■ Autor    Pavel Tišnovský, Red Hat
■ Email    <ptisnovs 0x40 redhat 0x2e com>
■ Datum    2018-09-xx

Obsah přednášky
--------------------------------------------------
▶ Základní informace o LSP
▶ Podpora v IDE a textových editorech
▶ Dostupné implementace serverů
▶ Princip činnosti LSP
▶ Python Language Server
▶ Plugin vim-lsp
▶ Instalace pluginu vim-lsp
▶ Základní příkazy
▶ Nastavení omnicompletion
▶ Příklad konfigurace Vimu

Základní informace o LSP
--------------------------------------------------
▶ Univerzální protokol umožňující komunikaci mezi:
    ◆ (programátorským) textovým editorem
    ◆ integrovaným vývojovým prostředím (IDE)
    ◆ nástroji pro refaktoring atd. jazyka X
    ◆ nástroji pro refaktoring atd. jazyka Y
    ◆ linterem
    ◆ statickým analyzátorem kódu
    ...

Podpora v IDE a textových editorech
--------------------------------------------------
▶ Visual Studio Code
▶ Eclipse
    ◆ LSP4E
▶ Eclipse Che
    ◆ Webové IDE
▶ Atom IDE
    ◆ Textový editor Atom doplněný o pluginy
▶ Vim
    ◆ vim-lsp
▶ Emacs
    ◆ lsp-mode

Dostupné implementace serverů
--------------------------------------------------
▶ Aktuální informace o dostupných serverech
    ◆ https://microsoft.github.io/language-server-protocol/implementors/servers/

Dostupné implementace serverů - pouze vybrané jazyky
----------------------------------------------------
▶ Bash
    ◆ Bash Language Server
▶ C# 
    ◆ csharp-language-server-protocol
▶ C a C++
    ◆ VS Code C++ extension
    ◆ clangd
    ◆ cquery
        - (pozor - různá kvalita implementace)
▶ Clojure
    ◆ clojure-lsp
▶ Erlang
    ◆ sourcer
▶ Elixir
    ◆ elixir-ls
▶ F#
    ◆ F# Language Server
▶ Go
    ◆ sourcegraph-go
▶ Java
    ◆ Eclipse JDT LS
    ◆ Java Compiler (javac) API-based Java support
▶ Javascript-Typescript
    ◆ javascript-typescript
▶ Julia
    ◆ Julia language server
▶ Lua
    ◆ lua-lsp
▶ Python 
    ◆ PyDev on VSCode
    ◆ Python Language Server
    ◆ Python Tools for Visual Studio
▶ Ruby
    ◆ solargraph
    ◆ language_server-ruby
    ◆ orbacle
▶ Rust 
    ◆ Rust Language Server
▶ TypeScript
    ◆ Typescript Language Server

Princip činnosti LSP
--------------------------------------------------
▶ Architektura klient-server
    ◆ založen na JSON-RPC
        - poměrně snadná implementace
        - rychlé úpravy
        - flexibilita protokolu
    ◆ klient
        - textový editor
        - desktopové IDE
        - webové IDE
    ◆ server
        - linter
        - statická analýza zdrojového kódu
        - nástroj pro vyhledávání, doskoky na definice...
        - kontrola stylu komentářů
        - profiler
        - nástroj pro refaktoring
        - "vše v jednom"
▶ Tři typy zpráv
    ◆ požadavek
        - na LSP server
    ◆ odpověď
        - od LSP serveru
    ◆ oznamovací zpráva, notifikace
        - většinou od LSP serveru

Požadavek - odpověď
--------------------------------------------------
textDocument/didOpen ->
textDocument/didChange ->
<- textDocument/publishDiagnostics
<- textDocument/didClose

Příklad požadavku poslaného serveru
--------------------------------------------------
{'method': 'textDocument/hover', 'jsonrpc': '2.0', 'id': 4,
 'params': {'textDocument': {'uri': 'file:///home/ptisnovs/t.py'},
 'position': {'character': 0, 'line': 21}}}

Jeden typ notifikace vrácené serverem klientovi:
--------------------------------------------------
textDocument/publishDiagnostics
{'uri': 'file:///home/ptisnovs/t.py',
 'diagnostics': [{'source': 'pycodestyle',
 'range': {'start': {'line': 3, 'character': 19},
           'end': {'line': 3, 'character': 21}},
           'message': 'W291 trailing whitespace', 'code': 'W291', 'severity': 2}]}

Python Language Server
--------------------------------------------------
▶ Instalace (pro právě přihlášeného uživatele)
      pip3 install --user python-language-server
▶ Při instalaci se automaticky vyřeší několik závislostí
    ◆ jedi
    ◆ python-jsonrpc-server
    ◆ pluggy
    ◆ parso
▶ Lze použít z jakéhokoli editoru
▶ Je možné spustit explicitně
    ◆ pyls [volby]
    ◆ Volby
        - použití TCP namísto stdio
        - specifikace adresy a portu při TCP
        - logování
        - "ukecanost" při logování

Plugin vim-lsp
--------------------------------------------------
▶ Zajišťuje komunikaci mezi Vimem a language serverem
    ◆ samozřejmě přes protokol LSP
▶ Používá některé speciální možnosti Vimu
    ◆ Preview window
    ◆ Quickfix
        - klávesové zkratky pro doskoky na chyby
        - speciální režim používaný pro zachycení chybovýc zpráv
        - používá se i při grepování atd.
        - :cn :cp :cc 
▶ Všechny klávesové zkratky jsou plně konfigurovatelné

Instalace pluginu vim-lsp
--------------------------------------------------
▶ Správci balíčků?
    ◆ Vundle
    ◆ Pathogen
    ◆ Vim 8 a jeho správce balíčků
        - :help packages
▶ Repositář
    ◆ https://github.com/prabirshrestha/vim-lsp
▶ Vyžaduje i další modul
    ◆ https://github.com/prabirshrestha/async.vim
▶ Po instalaci rychlé otestování
:Lsp<Tab>

Základní příkazy
--------------------------------------------------
▶ :LspHover
    ◆ Otevře okno s podrobnějšími informacemi o objektu,
      který se nalézá pod kurzorem
    ◆ Lze zavřít klávesovou zkratkou Ctrl+W Ctrl+Z.
▶ :LspDocumentDiagnostic
    ◆ Zobrazení výsledků produkovaných linterem a taktéž 
      nástrojem pro kontrolu dokumentačních řetězců
    ◆ Výsledky se zobrazí v Quickfix oknu
    ◆ Každý řádek odpovídá jednomu problému
▶ :LspDocumentSymbol
    ◆ Vypíše všechny symboly (funkce, metody, třídy, proměnné)
      nalezené v aktuálně editovaném modulu
    ◆ Výsledky se opět zobrazí v Quickfix oknu
        - každý řádek odpovídá jednomu nalezenému symbolu.
▶ :LspRename
    ◆ Přejmenování symbolu pod kurzorem (a jeho dalších výskytů)
    ◆ Po zadání tohoto příkazu se Vim zeptá na nové jméno
        - to následně použije
    ◆ V případě Pythonu vyžaduje opravenou verzi.
        - stejně mi nikdy pořádně nefungoval :-(

Spuštění language serveru
--------------------------------------------------
call lsp#register_server({'name': 'pyls', 'cmd': {server_info->['pyls']},
'cmd': {server_info->['pyls']},
'whitelist': ['python'] })

Nastavení omnicompletion
--------------------------------------------------
▶Vkládací režim
Ctrl+X Ctrl+O

Příklad konfigurace Vimu
--------------------------------------------------

Základní konfigurační volby
--------------------------------------------------
set nocompatible                " rezim nekompatibilni s vi, pouzivejte jako prvni volbu
set encoding=utf-8              " interni format znaku ve Vimu (neovlivnuje nacitani a ukladani)
set novisualbell                " pri chybe se nepipa, ale zablika obrazovka
set hlsearch                    " zvyrazneni vysledku hledani
set incsearch                   " zvyrazneni pri hledani
set showmatch                   " bude se zobrazovat prislusna druha zavorka
set showmode                    " bude se zobrazovat rezim cinnosti (-- INSERT --, -- REPLACE --, -- VISUAL -- ...)
set showcmd                     " bude se zobrazovat prave zadavany prikaz (3dd ...)
set ruler                       " bude se zobrazovat pravitko s pozici kurzoru
set shiftwidth=4                " pocet mezer pri posunu bloku pomoci << a >>
set expandtab                   " expanze znaků Tab na mezery
set tabstop=4                   " pocet mezer odpovidajicich znaku Tab
set bs=2                        " backspace maze vse
 
set backupdir=~/temp,.          " adresar pro ulozeni zaloznich souboru
set directory=~/temp,.          " adresar pro swapovaci soubor
set viminfo='20,\"50,n~/temp/_viminfo

Nastavení klávesových zkratek pro Python
--------------------------------------------------
F1   zavolání funkce LspStatus
F2   spuštění skriptu v Pythonu 2
F3   spuštění skriptu v Pythonu 3
F4   zavolání funkce LspDocumentDiagnostics
F5   zavolání funkce LspHover
F6   zavolání funkce LspDocumentSymbol
F7   zavolání funkce 
F8   analýza pomocí nástroje pep8
F9   analýza pomocí nástroje pydocstyle (doc.stringy)
F10  analýza pomocí nástroje Radon
F11  spuštění skriptu v debuggeru PuDB
F12  uzavření náhledového okna
Tab  zavolání funkce omni completion

Nastavení klávesových zkratek pro Python
--------------------------------------------------
" nastaveni pro Python
augroup __python__
  au!
  au BufRead,BufNewFile *.py map <F1> :LspStatus<cr>
  au BufRead,BufNewFile *.py map <F2> :!python2 %<cr>
  au BufRead,BufNewFile *.py map <F3> :!python3 %<cr>
  au BufRead,BufNewFile *.py map <F4> :LspDocumentDiagnostics<cr>
  au BufRead,BufNewFile *.py map <F5> :LspHover<cr>
  au BufRead,BufNewFile *.py map <F6> :LspDocumentSymbol<cr>
  au BufRead,BufNewFile *.py map <F8> :!pep8 %<cr>
  au BufRead,BufNewFile *.py map <F9> :!pydocstyle ./%<cr>
  au BufRead,BufNewFile *.py map <F10> :!radon cc ./%<cr>
  au BufRead,BufNewFile *.py map <F11> :!pudb3 %<cr>
  au BufRead,BufNewFile *.py map <F12> <C-W><C-Z>
  au BufRead,BufNewFile *.py imap <F12> <C-O><C-W><C-Z>
  au BufRead,BufNewFile *.py imap <Tab> <C-X><C-O>
augroup END
 
Další potenciálně užitečná nastavení
--------------------------------------------------
highlight OverLength ctermbg=yellow ctermfg=white guibg=#592929
match OverLength /\%99v.\+/
setlocal omnifunc=lsp#complete

Ve .vimrc:
--------------------------------------------------
augroup __python__
  au BufRead,BufNewFile *.py highlight OverLength ctermbg=yellow ctermfg=white guibg=#592929
  au BufRead,BufNewFile *.py match OverLength /\%99v.\+/
  au BufRead,BufNewFile *.py setlocal omnifunc=lsp#complete
augroup END

Vlastní spuštění Python Language Serveru
--------------------------------------------------
" přidat do .vimrc
if (executable('pyls'))
    au User lsp_setup call lsp#register_server({
        \ 'name': 'pyls',
        \ 'cmd': {server_info->['pyls']},
        \ 'whitelist': ['python']
        \ })
endif

Spuštění Python Language Serveru s logováním
--------------------------------------------------
 přidat do .vimrc
if (executable('pyls'))
    au User lsp_setup call lsp#register_server({
        \ 'name': 'pyls',
        \ 'cmd': {server_info->['pyls']},
        \ 'cmd': {server_info->['pyls', '-vv', '--log-file', '/tmp/pyls.txt']},
        \ 'whitelist': ['python']
        \ })
endif
█
